pipeline {
    agent any

    parameters {
        booleanParam(name: "promote",
            defaultValue: false,
            description: "Czy chcesz wypromować artefakt? (Tylko gdy wszystkie etapy wykonają się poprawnie)")
        string(name: "version",
            defaultValue: "1.0.0",
            description: "Podaj numer wersji")
        string(name: "hasło",
            defaultValue: "123",
            description: "Podaj hasło")
    }

    stages {
        stage('Init'){
            steps {
                git url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2022_S.git', branch: 'PG403910'
                sh 'mkdir logs'
                sh 'cd logs'
                sh 'touch build.log'
                sh 'touch test.log'
            }
            post{
                success{
                    echo 'Project initialized'
                }
                unsuccessful{
                    echo 'Failed to initialize project'
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building"
                sh 'docker build -t docker_build:latest . -f ./ITE/GCL03/FG402836/lab5/pliki/docker_build | tee logs/build.log'
                sh 'docker run --name  docker_build docker_build:latest'
            }
            post{
                success{
                    echo 'Success'
                }
                unsuccessful{
                    echo 'Failed'
                }
            }
        }
	    stage('Test') {
                steps {
                    echo 'Starting Testing'
                    sh 'docker build -t docker_test:latest . -f ./ITE/GCL03/FG402836/lab5/pliki/docker_test | tee logs/test.log'
                    sh 'docker run --name  docker_test docker_test:latest'
                }
            post{
                success{
                    echo 'Tested successfully'
                }
                unsuccessful{
                    echo 'Failed to make tests'
                }
            }

        }
        stage('Cleanup') {
            steps {
                sh ' docker rm docker_build'
                sh 'docker rm docker_test'
                archiveArtifacts artifacts: "logs/build.log"
                archiveArtifacts artifacts: "logs/test.log"
            }
        }

        stage('Publish'){
            when{
                expression{
                    return params.Promote == true; 
                }
            }
            steps{
                echo 'Starting Publishing'
                sh "mkdir ${params.version}"
                sh 'docker run --name docker_test docker_test:latest'
                sh "docker cp docker_test:/quick-example-of-testing-in-nodejs ./${params.version}"
                echo "Pushing Image to DockerHub"
                withCredentials([string(credentialsId: 'malokreatywny22222', variable: 'password')]) {
                    sh 'docker login -u malokreatywny22222 -p ${password}'
                }
                sh "docker tag docker_test:latest malokreatywny22222/quick-example-of-testing-in-nodejs:${params.version}"
                sh "docker push malokreatywny22222/quick-example-of-testing-in-nodejs:${params.version}"
                
                sh 'docker rm jenkinstest'
                sh "tar -czvf quick-example-of-testing-in-nodejs-${params.version}.tar.gz ${params.version}/"
                echo "Creating Artifact"
                archiveArtifacts artifacts: "quick-example-of-testing-in-nodejs-${params.version}.tar.gz"
            }
            post{
                success{
                    echo "Publishing complete"
                }
                unsuccessful{
                    echo "Failed to publish"
                }
            }
        }
    }
}