pipeline {
	agent any
    parameters {
        string(name: 'BRANCH', defaultValue: 'dev', description: '')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: '')
        }
  	stages {
        stage("Clone"){
            steps {
              sh 'mkdir artifacts/bin -p'
              sh 'docker container prune -f'
              sh 'docker volume prune -f'
              sh 'docker volume  create --name repo_vol'
              sh 'docker volume  create --name build_vol'
              sh "docker build -t lz4clone . -f ITE/GCL04/MP401341/Lab05/DockerfileClone --build-arg BRANCH=${BRANCH}"
              sh 'docker run -v repo_vol:/lz4 lz4clone'
                }
              }
        stage("Build") {
            steps {
                sh 'docker build -t build . -f ITE/GCL04/MP401341/Lab05/DockerfileBuild'
                sh 'docker run --name build_container -v repo_vol:/lz4 -v build_vol:/build -v ${PWD}/artifacts/bin:/public build'
                archiveArtifacts 'artifacts/**/*'
            }
        }
        stage("Test") {
           when {
                  environment name: 'RUN_TESTS', value: "true"
            }
            steps {
                sh 'docker build -t test . -f ITE/GCL04/MP401341/Lab05/DockerfileTest --build-arg image=build'
                sh 'docker run --name test_container -v repo_vol:/lz4 test'
            }
        }
        stage("Deploy") {
            steps {
                sh 'docker build -t deployment . -f ITE/GCL04/MP401341/Lab05/DockerfileDeploy'
                sh 'docker run  -v build_vol:/build  deployment'
            }
        }
        stage("Publish") {
            steps {
            sh 'echo WIP'
            }
        }
  	}
     post {
      always {
        catchError {
          sh 'docker container logs build_container > artifacts/build_logs.txt'
            } 
        catchError {
          script{
            if (env.RUN_TESTS == true){
                sh 'docker container logs test_container > artifacts/test_logs.txt'
            }
            }
          } 
        archiveArtifacts 'artifacts/*_logs.txt'
        sh 'rm -rf artifacts'
      }
      }
      
}

