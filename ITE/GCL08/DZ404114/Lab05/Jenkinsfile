pipeline {
			
	agent any

    parameters {
        string(name: 'Version', defaultValue: '1.0.0', description: 'Version')
        booleanParam(name: 'Promote', defaultValue: true, description: 'Promote statement')
        string(name: 'Dockerfiles', defaultValue: './ITE/GCL08/DZ404114/Lab05', description: 'Dockerfiles path')
    }
    
	stages {
		stage('Clone') {
			steps {
				echo 'Cloning express'
				sh 'docker volume create input-volume'
				sh 'docker rm tempContainer || true'
				sh 'docker run --rm --name tempContainer --mount "type=volume,src=input-volume,dst=/myapp" node bash -c "cd ~/ && ls express || git clone https://github.com/expressjs/express.git;cp -R express /myapp; ls /myapp"'
			}
		}
	
	    stage('Build') {
			steps {
				echo 'Buildig express with npm'
				dir("${params.Dockerfiles}") {
					sh 'docker build . -t express_alpine -f Dockerfile'
					sh 'docker volume create output-volume'
					sh 'docker rm express-build || true'
					sh 'docker run --rm --name express-build --mount "type=volume,src=input-volume,dst=/myapp" --mount "type=volume,src=output-volume,dst=/myapp_build" express_alpine bash -c "cd /myapp/express && npm install; cp -R /myapp/express /myapp_build"'
				}
			}
		}

	    stage('Test') {
			steps {
				echo 'Testing express with npm'
				dir("${params.Dockerfiles}") {
					sh 'docker rm express-test || true'
					sh 'docker run --rm --name express-test --mount "type=volume,src=input-volume,dst=/myapp_test" express_alpine bash -c "cd /myapp_test/express && npm test"'
				}
			}
		}
        
		stage('Deploy') {
			steps {
				echo 'Deploying express'
				sh 'docker rm -f express-deploy || true'
				sh 'docker run --name express-deploy --mount "type=volume,src=output-volume,dst=/usr/local/myapp" express_alpine bash -c "cd /usr/local/myapp/express && npm run"'
				sh 'sleep 5; exit $(docker inspect express-deploy --format="{{.State.ExitCode}}")'
				sh 'docker rm -f express-deploy'
			}
		}

        stage('Prepare publish'){
            when {
                expression {return params.Promote}
		    }
            steps {
                echo 'Preparing publish'
                sh 'ls /var/jenkins_home/workspace/artifacts || mkdir /var/jenkins_home/workspace/artifacts'
            }
        }
        
		stage('Publish') {
		    when {
                expression {return params.Promote}
		    }
		    agent {
                docker {
                    image 'node:alpine'
                    args '--rm --mount "type=volume,src=output-volume,dst=/usr/local/myapp" --mount "type=bind,source=/var/jenkins_home/workspace/artifacts,dst=/usr/local/copy" -u root:root'
                }
            }
			steps {
			    sh 'rm -rf /usr/local/copy/* || true'
			    sh "cd /usr/local/myapp/express && npm version ${params.Version} && npm pack"
			    sh "mv /usr/local/myapp/express/express-${params.Version}.tgz /usr/local/copy"
			    dir('/var/jenkins_home/workspace/artifacts'){
			        archiveArtifacts artifacts: "express-${params.Version}.tgz"
			    }
			}
		}
	}
	post {
        	success {
            		echo 'Pipeline succsess'
        	}
        	failure {
            		echo 'Pipeline fail'
        	}
    	}
}
