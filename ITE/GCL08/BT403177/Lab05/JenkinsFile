pipeline {

  agent any

  parameters {
    string(name: 'Version', defaultValue: '1.0.0', description: 'Version')
    booleanParam(name: 'Promote', defaultValue: true, description: 'Promote statement')
    string(name: 'Dockerfiles', defaultValue: './ITE/GCL08/BT403177/Lab05', description: 'Dockerfiles path')
  }

  stages {

    stage('Clone') {
      steps {
        echo 'Cloning apollo-server'
        sh 'docker volume create input-volume'
        sh 'docker rm tempContainer || true'
        sh 'docker run --rm --name tempContainer --mount "type=volume,src=input-volume,dst=/myapp" node bash -c "cd ~/; ls apollo-server || git clone https://github.com/apollographql/apollo-server ;ls apollo-server; cp -R apollo-server /myapp; ls /myapp"'
      }
    }

    stage('Build') {
      steps {
        echo 'Buildig apollo-server with npm'
        dir("${params.Dockerfiles}") {
          sh 'docker build . -t apollo-server -f Dockerfile'
          sh 'docker volume create output-volume'
          sh 'docker rm apollo-server-build || true'
          sh 'docker run --rm --name apollo-server-build --mount "type=volume,src=input-volume,dst=/myapp" --mount "type=volume,src=output-volume,dst=/myapp_build" apollo-server bash -c "cd /myapp/apollo-server && npm install; cp -R /myapp/apollo-server /myapp_build"'
        }
      }
    }

    stage('Test') {
      steps {
        echo 'Testing apollo-server with npm'
        dir("${params.Dockerfiles}") {
          sh 'docker rm apollo-server-test || true'
          sh 'docker run --rm --name apollo-server-test --mount "type=volume,src=input-volume,dst=/myapp_test" apollo-server bash -c "cd /myapp_test/apollo-server && npm install && npm test || true"'
        }
      }
    }

    stage('Deploy') {
      steps {
        echo 'Deploying apollo-server'
        sh 'docker rm -f apollo-server-deploy || true'
        sh 'docker run --name apollo-server-deploy --mount "type=volume,src=output-volume,dst=/usr/local/myapp" apollo-server bash -c "cd /usr/local/myapp/apollo-server && npm run"'
        sh 'sleep 5; exit $(docker inspect cropperjs-deploy --format="{{.State.ExitCode}}")'
        sh 'docker rm -f apollo-server-deploy'
      }
    }

    stage('Prepare publish') {
      when {
        expression {
          return params.Promote
        }
      }
      steps {
        echo 'Preparing publish'
        sh 'ls /var/jenkins_home/workspace/artifacts || mkdir /var/jenkins_home/workspace/artifacts'
      }
    }
	stage('Publish') {
      when {
        expression {
          return params.Promote
        }
      }
      agent {
        docker {
          image 'node:alpine'
          args '--rm --mount "type=volume,src=output-volume,dst=/usr/local/myapp" --mount "type=bind,source=/var/jenkins_home/workspace/artifacts,dst=/usr/local/copy" -u root:root'
        }
      }
      steps {
        sh  "apk add git"
        sh  "git config --global user.email \"you@example.com\""
        sh  "git config --global user.name \"Your Name\""
        sh 'rm -rf /usr/local/copy/* || true'
        sh "cd /usr/local/myapp/apollo-server && npm version --allow-same-version ${params.Version} && npm pack"
        sh "ls /usr/local/myapp/apollo-server"
        sh "mv /usr/local/myapp/apollo-server/apollo-server-${params.Version}.tgz /usr/local/copy"
        dir('/var/jenkins_home/workspace/artifacts') {
          archiveArtifacts artifacts: "apollo-server-${params.Version}.tgz"
        }
      }
    }
  }
}
