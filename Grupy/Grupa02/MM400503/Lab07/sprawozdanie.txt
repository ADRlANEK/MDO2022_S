1. "Moim źródłem prawy" jest repozytorium, sforkowane z repozytorium aplikacji, którą będę uruchamiać. W "źródle prawdy" przechowuje pliki źródłowe oraz wszystkie skrypty potrzebne do zrealizowania pipeline'a. Link do repozytorium: https://github.com/MnichMaciej/wire-webapp.
4. Pozwoliłem sobie zamienić kolejność wykonywania zadań i rozpocząłem przygotowywanie pipeline'a od napisania trigger'a. Wybrałem GitHook'a post-commit. Skrypt został napisany w Pythonie i sprawdza, czy commit message zawiera hasło "release-version". Następnie pobiera nowy tag, zawarty po haśle. Sprawdza, czy tag o danej nazwie już istnieie i w przeciwnym wypadku tworzy nowy tag, który zostaje spushowany do repozytorium. Następnie za pomocą curl'a wysyła prośbę do Jenkins'a o rozpoczęcie nowego build'a, którego parametrem będzie utworzony tag. W przypadku, gdy w repozytorium istnieje już tag, który został podany w commit message, wystartuje pipeline z istniejącym już tagiem.
3. Następnie zająłem się stage'm "Build". Na początku pobieramy wersję repozytorium oznaczoną tagiem, który wysłaliśmy jako parametr pipeline'a. Następnie za pomocą docker compose'a uruchamiamy build serwisu 'build-agent'. Używamy do tego parametu TAG, aby poprawnie otagować zbudowany obraz. Po zakończeniu etapu, użytkownik widzi w konsoli informację w odpowiednim kolorze o rezultacie etapu.
2. Kolejnym etapem jest stage "Tests". Za pomocą docker compose'a budujemy i uruchamiamy serwis "test-agent", z parametrem "TAG", aby użył zbudowanego wcześniej obrazu. Wynik testów zapisywany jest w zmiennej, od której zależy powodzenie lub porażka stage'a. Ponownie użytkownik jest informowany przez oznaczony kolorem wpis w konsoli.
5. Ostatnim etapem jest stage "Deploy", w którym otagowany obraz z docker-compose'a zostaje spushowany do repozytorium na docker hub'ie. Następnie za pomocą curl'a usuwany jest stary kontener, tworzony i uruchamiany jest nowy. Pipeline czeka 10s, aby kontener się uruchomił i sprawdza jego logi, aby potwierdzić, że aplikacja została uruchomiona. Ponownie użytkownik jest informowany o rezultacie.

